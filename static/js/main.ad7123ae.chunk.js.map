{"version":3,"sources":["utils/convertWeatherData.ts","components/Filters/index.tsx","components/WeatherItem/index.tsx","components/WeatherList/index.tsx","components/WeatherCard/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DayName","MonthName","Filters","todayId","selectedDay","selectDay","buttons","name","dayId","className","map","button","index","key","classnames","type","onClick","WeatherItem","id","abbr","dayName","dayNumber","monthName","maxTemp","minTemp","onClickHandler","useCallback","src","alt","WeatherList","weather","day","WeatherCard","convertWeather","weatherList","weather_state_abbr","weather_state_name","applicable_date","max_temp","min_temp","date","Date","getDay","getDate","getMonth","Math","round","App","useState","setWeather","selectedDayId","setSelectedDayId","useEffect","axios","get","then","consolidated_weather","data","catch","error","console","log","useMemo","find","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ad7123ae.chunk.js","sourcesContent":["enum DayName {\n    'Воскресенье',\n    'Понедельник',\n    'Вторник',\n    'Среда',\n    'Четверг',\n    'Пятница',\n    'Суббота',\n}\n\nenum MonthName {\n    'января',\n    'февраля',\n    'марта',\n    'апреля',\n    'мая',\n    'июня',\n    'июля',\n    'августа',\n    'сентября',\n    'октября',\n    'ноября',\n    'декабря',\n}\n\nconst convertWeather = (weatherList: Array<any>) => {\n    return weatherList.map(({id, weather_state_abbr, weather_state_name, applicable_date, max_temp, min_temp}) => {\n        const date: Date = new Date(applicable_date);\n        const dayName: string = DayName[date.getDay()];\n        const dayNumber: number = date.getDate();\n        const monthName: string = MonthName[date.getMonth()];\n\n        return {\n            id,\n            name: weather_state_name,\n            abbr: weather_state_abbr,\n            date: applicable_date,\n            dayName,\n            dayNumber,\n            monthName,\n            maxTemp: Math.round(max_temp),\n            minTemp: Math.round(min_temp),\n        }\n    })\n};\n\nexport default convertWeather\n","import React from 'react';\nimport classnames from 'classnames';\nimport './filters.css';\n\ninterface FiltersProps {\n    todayId: number,\n    selectedDay: number,\n    selectDay: (id?: number) => void,\n}\n\nconst Filters: React.FunctionComponent<FiltersProps> = ({todayId, selectedDay, selectDay}) => {\n    const buttons = [\n        {\n            name: 'На неделю',\n        },\n        {\n            name: 'Сегодня',\n            dayId: todayId\n        }\n    ];\n\n    return (\n        <div className=\"filters\">\n            {buttons.map((button, index) => (\n                <button\n                    key={index}\n                    className={classnames('filters-button', {\n                        'filters-button_active': selectedDay === button.dayId,\n                    })}\n                    type=\"button\"\n                    onClick={() => selectDay(button.dayId)}\n                >\n                    {button.name}\n                </button>\n            ))}\n        </div>\n    );\n};\n\nexport default Filters;\n","import React, { useCallback } from 'react';\nimport './weather-item.css';\nimport { WeatherCardProps } from '../../types/types';\n\nconst WeatherItem: React.FunctionComponent<WeatherCardProps> = ({id, name, abbr, dayName, dayNumber, monthName, maxTemp, minTemp, selectDay}) => {\n    const onClickHandler = useCallback(() => {\n        selectDay && selectDay(id)\n    }, [selectDay, id]);\n\n    return (\n        <li className={`weather-item weather-bg-${abbr}`} onClick={onClickHandler}>\n            <div className=\"weather-item__date\">\n                <div>{dayName}</div>\n                {`${dayNumber} ${monthName}`}\n            </div>\n            <div className=\"weather-item__temp\">{`${maxTemp}° / ${minTemp}°`}</div>\n            <div className=\"weather-item__icon\">\n                <img\n                    className=\"weather-item__image\"\n                    src={`https://www.metaweather.com/static/img/weather/${abbr}.svg`}\n                    alt={name}\n                />\n            </div>\n        </li>\n    );\n};\n\nexport default WeatherItem;\n","import React from 'react';\nimport './weather-list.css';\n\nimport WeatherItem from '../WeatherItem';\nimport { WeatherCardProps } from '../../types/types';\n\ninterface WeatherListProps {\n    weather: WeatherCardProps[],\n    selectDay: (id: number) => void,\n}\n\nconst WeatherList: React.FunctionComponent<WeatherListProps> = ({weather, selectDay}) => {\n    if (!weather) {\n        return <div className=\"weather-list-loading\">Loading...</div>;\n    }\n    return (\n        <ul className=\"weather-list\">\n            {weather.map((day: WeatherCardProps) => <WeatherItem {...day} key={day.id} selectDay={selectDay}/>)}\n        </ul>\n    );\n};\n\nexport default WeatherList;\n","import React from 'react';\nimport './weather-card.css';\nimport { WeatherCardProps } from '../../types/types';\n\nconst WeatherCard: React.FunctionComponent<WeatherCardProps> = ({name, abbr, dayName, dayNumber, monthName, maxTemp, minTemp}) => (\n    <div className={`weather-card weather-bg-${abbr}`}>\n        <div className=\"weather-card__icon\">\n            <img\n                className=\"weather-card__image\"\n                src={`https://www.metaweather.com/static/img/weather/${abbr}.svg`}\n                alt={name}\n            />\n        </div>\n        <div className=\"weather-card__temp\">{`${maxTemp}° / ${minTemp}°`}</div>\n        <div className=\"weather-card__date\">\n            <div>{dayName}</div>\n            {`${dayNumber} ${monthName}`}\n        </div>\n    </div>\n);\n\nexport default WeatherCard;\n","import React, {useEffect, useState, useMemo} from 'react';\nimport axios from 'axios';\nimport './App.css';\n\nimport Filters from './components/Filters';\nimport WeatherList from './components/WeatherList';\nimport WeatherCard from './components/WeatherCard';\nimport convertWeather from './utils/convertWeatherData';\nimport { WeatherCardProps } from './types/types';\n\nconst MOSCOW_WOEID = 2122265;\nconst PROXY = 'https://cors-anywhere.herokuapp.com/';\n\nconst App: React.FunctionComponent = () => {\n    const [weather, setWeather] = useState();\n    const [selectedDayId, setSelectedDayId] = useState();\n\n    useEffect(() => {\n        axios.get(`${PROXY}https://www.metaweather.com/api/location/${MOSCOW_WOEID}/`)\n            .then(({data}) => {\n                const {consolidated_weather} = data;\n                setWeather(convertWeather(consolidated_weather));\n            })\n            .catch((error) => {\n                console.log(error);\n            })\n    }, []);\n\n    let selectedDay = useMemo(() => {\n        if (!selectedDayId) {\n            return weather && weather[0];\n        }\n        return weather.find((day: WeatherCardProps) => day.id === selectedDayId);\n    }, [weather, selectedDayId]);\n\n    return (\n        <div className=\"app\">\n            <Filters selectDay={setSelectedDayId} selectedDay={selectedDayId} todayId={weather && weather[0].id}/>\n            <div className=\"content\">\n                {selectedDayId ? (\n                    <WeatherCard {...selectedDay} />\n                ) : (\n                    <WeatherList weather={weather} selectDay={setSelectedDayId}/>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}